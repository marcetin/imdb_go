package actions

import (
	"github.com/gobuffalo/buffalo"
	"github.com/markbates/pop"
	"github.com/pkg/errors"
	"github.com/spatil/imdb/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Movie)
// DB Table: Plural (Movies)
// Resource: Plural (Movies)
// Path: Plural (/movies)
// View Template Folder: Plural (/templates/movies/)

// MoviesResource is the resource for the movie model
type MoviesResource struct {
	buffalo.Resource
}

// List gets all Movies. This function is mapped to the path
// GET /movies
func (v MoviesResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	movies := &models.Movies{}
	// You can order your list here. Just change
	err := tx.All(movies)
	// to:
	// err := tx.Order("create_at desc").All(movies)
	if err != nil {
		return errors.WithStack(err)
	}
	// Make movies available inside the html template
	c.Set("movies", movies)
	return c.Render(200, r.HTML("movies/index.html"))
}

// Show gets the data for one Movie. This function is mapped to
// the path GET /movies/{movie_id}
func (v MoviesResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Movie
	movie := &models.Movie{}
	// To find the Movie the parameter movie_id is used.
	err := tx.Find(movie, c.Param("movie_id"))
	if err != nil {
		return errors.WithStack(err)
	}

	reviews := &models.Reviews{}
	tx.BelongsTo(movie).All(reviews)

	// Make movie available inside the html template
	c.Set("movie", movie)
	c.Set("reviews", reviews)
	c.Set("review", &models.Review{})
	return c.Render(200, r.HTML("movies/show.html"))
}

// New renders the formular for creating a new movie.
// This function is mapped to the path GET /movies/new
func (v MoviesResource) New(c buffalo.Context) error {
	// Make movie available inside the html template
	c.Set("movie", &models.Movie{})
	return c.Render(200, r.HTML("movies/new.html"))
}

// Create adds a movie to the DB. This function is mapped to the
// path POST /movies
func (v MoviesResource) Create(c buffalo.Context) error {
	// Allocate an empty Movie
	movie := &models.Movie{}
	// Bind movie to the html form elements
	err := c.Bind(movie)
	if err != nil {
		return errors.WithStack(err)
	}
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(movie)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make movie available inside the html template
		c.Set("movie", movie)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("movies/new.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was created successfully")
	// and redirect to the movies index page
	return c.Redirect(302, "/movies/%s", movie.ID)
}

// Edit renders a edit formular for a movie. This function is
// mapped to the path GET /movies/{movie_id}/edit
func (v MoviesResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Movie
	movie := &models.Movie{}
	err := tx.Find(movie, c.Param("movie_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Make movie available inside the html template
	c.Set("movie", movie)
	return c.Render(200, r.HTML("movies/edit.html"))
}

// Update changes a movie in the DB. This function is mapped to
// the path PUT /movies/{movie_id}
func (v MoviesResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	// Allocate an empty Movie
	movie := &models.Movie{}
	err := tx.Find(movie, c.Param("movie_id"))
	if err != nil {
		return errors.WithStack(err)
	}
	// Bind movie to the html form elements
	err = c.Bind(movie)
	if err != nil {
		return errors.WithStack(err)
	}
	verrs, err := tx.ValidateAndUpdate(movie)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make movie available inside the html template
		c.Set("movie", movie)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("movies/edit.html"))
	}
	// If there are no errors set a success message
	c.Flash().Add("success", "Movie was updated successfully")
	// and redirect to the movies index page
	return c.Redirect(302, "/movies/%s", movie.ID)
}

// Destroy deletes a movie from the DB. This function is mapped
// to the path DELETE /movies/{movie_id}
func (v MoviesResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx := c.Value("tx").(*pop.Connection)
	movie, err := find_movie(tx, c)
	if err != nil {
		return errors.WithStack(err)
	}
	err = tx.Destroy(movie)
	if err != nil {
		return errors.WithStack(err)
	}
	// If there are no errors set a flash message
	c.Flash().Add("success", "Movie was destroyed successfully")
	// Redirect to the movies index page
	return c.Redirect(302, "/movies")
}

func ReviewsHandler(c buffalo.Context) error {
	tx := c.Value("tx").(*pop.Connection)

	movie, err := find_movie(tx, c)

	review := &models.Review{}

	err = c.Bind(review)
	review.MovieID = movie.ID

	if err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndCreate(review)
	if err != nil {
		return errors.WithStack(err)
	}
	if verrs.HasAny() {
		// Make movie available inside the html template
		c.Set("review", review)
		// Make the errors available inside the html template
		c.Set("errors", verrs)
		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.HTML("movies/edit.html"))
	}

	return c.Redirect(302, "/movies/%s", movie.ID)
}

func find_movie(tx *pop.Connection, c buffalo.Context) (*models.Movie, error) {
	// Allocate an empty Movie
	movie := &models.Movie{}
	// To find the Movie the parameter movie_id is used.
	err := tx.Find(movie, c.Param("movie_id"))
	if err != nil {
		return movie, errors.WithStack(err)
	}
	return movie, nil
}
